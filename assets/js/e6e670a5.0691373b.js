"use strict";(self.webpackChunkcot_docs=self.webpackChunkcot_docs||[]).push([[320],{784:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"tech-stack/1nestjs","title":"NestJS","description":"NestJS is a powerful framework for building efficient, scalable Node.js server-side applications. It is built with TypeScript and provides an out-of-the-box application architecture that helps to create maintainable applications.","source":"@site/docs/tech-stack/1nestjs.md","sourceDirName":"tech-stack","slug":"/tech-stack/1nestjs","permalink":"/cot-documentation/docs/tech-stack/1nestjs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tech-stack/1nestjs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Tech Stack","permalink":"/cot-documentation/docs/category/tech-stack"},"next":{"title":"TypeORM","permalink":"/cot-documentation/docs/tech-stack/2typeorm"}}');var r=t(4848),i=t(8453);const o={},l="NestJS",a={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Create a New Project",id:"create-a-new-project",level:2},{value:"Install Dependencies",id:"install-dependencies",level:2},{value:"Run the Application",id:"run-the-application",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Modules",id:"modules",level:3},{value:"Controllers",id:"controllers",level:3},{value:"Providers",id:"providers",level:3},{value:"Services",id:"services",level:3},{value:"Pipes",id:"pipes",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Interceptors",id:"interceptors",level:3},{value:"Creating a Simple Application",id:"creating-a-simple-application",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"nestjs",children:"NestJS"})}),"\n",(0,r.jsx)(n.p,{children:"NestJS is a powerful framework for building efficient, scalable Node.js server-side applications. It is built with TypeScript and provides an out-of-the-box application architecture that helps to create maintainable applications."}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"NestJS is a progressive Node.js framework for building server-side applications. It uses TypeScript by default, and it is heavily inspired by Angular, so if you are familiar with Angular, you will feel right at home."}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(n.p,{children:["To get started with NestJS, you need to have Node.js installed. If you haven't installed it yet, you can download it from ",(0,r.jsx)(n.a,{href:"https://nodejs.org/",children:"nodejs.org"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Once Node.js is installed, you can install the NestJS CLI globally:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install -g @nestjs/cli\n"})}),"\n",(0,r.jsx)(n.h2,{id:"create-a-new-project",children:"Create a New Project"}),"\n",(0,r.jsx)(n.p,{children:"Once the CLI is installed, you can create a new NestJS project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest new project-name\n"})}),"\n",(0,r.jsx)(n.p,{children:"Replace project-name with the name you want for your project. The CLI will prompt you to select the package manager you prefer (npm or yarn). Choose one and continue."}),"\n",(0,r.jsx)(n.h2,{id:"install-dependencies",children:"Install Dependencies"}),"\n",(0,r.jsx)(n.p,{children:"After creating the project, navigate to your project directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cd project-name\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now, install the dependencies using the package manager (npm or yarn). If you chose npm:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install\n"})}),"\n",(0,r.jsx)(n.h2,{id:"run-the-application",children:"Run the Application"}),"\n",(0,r.jsx)(n.p,{children:"To start your application, you can use the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will start the application on ",(0,r.jsx)(n.a,{href:"http://localhost:3000/",children:"http://localhost:3000/"})," by default."]}),"\n",(0,r.jsx)(n.p,{children:"You should see something like the following in the terminal:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[Nest] 12345   - 2025-04-01 11:00:00   [NestFactory] Starting Nest application...\n[Nest] 12345   - 2025-04-01 11:00:00   [InstanceLoader] AppModule dependencies initialized +10ms\n[Nest] 12345   - 2025-04-01 11:00:00   [NestApplication] Nest application is successfully started +10ms\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, open your browser and navigate to ",(0,r.jsx)(n.a,{href:"http://localhost:3000/",children:"http://localhost:3000/"}),". You should see a message like:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'"Hello World!"\n'})}),"\n",(0,r.jsx)(n.p,{children:"This means your NestJS application is running successfully."}),"\n",(0,r.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(n.p,{children:"NestJS follows a modular architecture, where the application is divided into modules. Below are some key concepts in NestJS."}),"\n",(0,r.jsx)(n.h3,{id:"modules",children:"Modules"}),"\n",(0,r.jsx)(n.p,{children:"Modules are the fundamental building blocks in NestJS. Each module is a class annotated with the @Module() decorator. A module organizes related components such as controllers, services, and providers."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import { Module } from '@nestjs/common';\n\n@Module({\n  imports: [],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"controllers",children:"Controllers"}),"\n",(0,r.jsx)(n.p,{children:"Controllers handle incoming requests and return responses to the client. They are responsible for defining the application's routes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import { Controller, Get } from '@nestjs/common';\n\n@Controller('cats')\nexport class CatsController {\n  @Get()\n  findAll() {\n    return 'This action returns all cats';\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"providers",children:"Providers"}),"\n",(0,r.jsx)(n.p,{children:"Providers are used to handle business logic. They can be services, repositories, or any other class that can be injected into other components via dependency injection."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CatsService {\n  getHello(): string {\n    return 'Hello from Cats Service';\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"services",children:"Services"}),"\n",(0,r.jsx)(n.p,{children:"Services are providers that hold the business logic. They can be injected into controllers to share common functionality."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CatsService {\n  findAll() {\n    return ['Maine Coon', 'Persian', 'Siamese'];\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"pipes",children:"Pipes"}),"\n",(0,r.jsx)(n.p,{children:"Pipes are used to transform input data and validate it. They are often used for validating request parameters, body, or query parameters."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    return parseInt(value, 10);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"middleware",children:"Middleware"}),"\n",(0,r.jsx)(n.p,{children:"Middleware functions are executed before the route handler. They can be used to modify the request object, perform logging, or check authentication."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    console.log('Request...');\n    next();\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"interceptors",children:"Interceptors"}),"\n",(0,r.jsx)(n.p,{children:"Interceptors are used to modify the behavior of method calls, like transforming the result returned by a handler or adding additional logic."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    console.log('Before...');\n\n    return next\n      .handle()\n      .pipe(\n        tap(() => console.log('After...'))\n      );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-simple-application",children:"Creating a Simple Application"}),"\n",(0,r.jsx)(n.p,{children:"After installing NestJS and setting up your first project, let's create a simple application with a single route."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"After installing NestJS and setting up your first project, let's create a simple application with a single route."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest generate controller cats\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Add a route inside cats.controller.ts:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import { Controller, Get } from '@nestjs/common';\n\n@Controller('cats')\nexport class CatsController {\n  @Get()\n  findAll() {\n    return ['Maine Coon', 'Persian', 'Siamese'];\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Run the application"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, if you visit ",(0,r.jsx)(n.a,{href:"http://localhost:3000/cats",children:"http://localhost:3000/cats"}),", you should see a list of cat breeds returned by the server."]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"NestJS is an excellent framework for building efficient, scalable server-side applications. This documentation covers the basics of setting up a NestJS project, including core concepts like modules, controllers, providers, services, and other important features. Keep exploring NestJS to leverage its full potential!"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"This file now includes the full `Installation` section, along with other sections for NestJS basics.\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);